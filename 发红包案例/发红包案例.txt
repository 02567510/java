这个案例运用了：
类的继承extends；
类成员变量和成员方法和get和set成员方法；
子类对象通过有参构造方法，使用super关键字访问父类变量；
方法有返回值和无返回值使用；方法参数和无参数的使用；
数组集合ArrayList<>:数组集合作为参数和返回值使用;for循环获取，添加数组集合内容 ;
产生随机数;打印;for循环；


用户类（父类）
User{
	成员变量：
		姓名  name
		当前余额 money
	成员方法
		无参构造方法
		有参构造方法
		成员变量的get and set
		自定义：用于显示当前用户多少余额的方法show()
}

//群主的类（子类）  继承 用户类
Manager extends User{
	无参构造函数
	有参构造函数
自定义方法 :/*发红包 
	    返回值：ArrayList<Integer> 返回一个存储红包数组集合
                    方法名：sent
	    参数列表：总共发多少钱(int) ， 多少个(int)*/
	public ArrayList<Integer> sent(int totalMoney,int count){
		 1-创建一个集合对象，用来存储红包数组  ： ArrayList<Integer>  redList
		 2-查看群主有多少余额：定义一个变量用来接收查询到的信息（用super.get()方法获取）
		 3- 判断能否有足够的余额发红包：（用<if>判断，不满足条件返回一个空集合）

	<发红包工作准备工作>(在有足够余额前提下)	
 		4-扣钱，重新设置群主余额（也就是说得把群主发红包后的余额更改下）
		5-准备发红包，设置红包数组集合的2个参数
		<1>获取每个红包平均后所获得的钱数(包红包)
		<2>获取零头
		6-开始发红包，将红包添加到数组集合（遍历数组集合）,把除了最后一个红包，全部赋上平均值
			for(结束条件：红包个数)
		7-把零头放到最后一个红包里
		8-返回红包数组集合	
	 }
}


//普通成员类（子类） 继承 用户类
Member extends User{
	无参构造方法
	有参构造函数
          自定义：/*收红包方法
	        返回值：不需要返回任何数据，只负责接收  void
	         方法名：receive
                        参数列表：需要接收一个红包数组集合且泛型为整数， ArrayList<Integer>*/
              public void receive(ArrayList<Integer> redList){
		<1>、产生一个随机数，随机获取红包数组集合内的索引值(随机数产生范围：数组集合的长度redList.size())
		<2>、根据随机索引，从红包数组集合随机获取红包：redList.remove(索引值)
		<3>、查询成员：原来的余额 super.getMoney()
		<4>、把红包赋值给子类成员变量：余额： super.setMoney(原来的余额+从红包获取的钱)
	}
}

主函数
{
	创建一个群主对象并初始化
	创建多个普通成员对象并初始化
	//可以先打印在没发红包钱，各个对象的初始值（可选）
	
	创建一个红包数组集合：来接收群主对象的红包数组集合并初始化
	调用普通成员收红包方法：参数为上面创建的红包数组集合
	
	打印普通成员收到的红包：调用父类  show（）方法



}
